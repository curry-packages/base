# Makefile for various compilations of the system libraries,
# in particular, to generate the documentation

CYMAKEPARAMS = --extended --no-verb --no-warn --no-overlap-warn -i. -imeta

# directory for HTML documentation files
# LIBDOCDIR = $(DOCDIR)/html
LIBDOCDIR := CDOC
# directory for LaTeX documentation files
TEXDOCDIR := $(DOCDIR)/src/lib

# replacement stuff
comma     := ,
empty     :=
space     := $(empty) $(empty)
# prefix "pre" "dir/file.ext" = "dir/prefile.ext"
prefix     = $(dir $(2))$(1)$(notdir $(2))
# comma_sep "a b c" = "a, b, c"
comma_sep  = $(subst $(space),$(comma)$(space),$(1))

# Curry library files
LIB_CURRY     = $(filter-out $(EXCLUDES), $(wildcard *.curry meta/*.curry AbstractCurry/*.curry))
# lib names without directory prefix
LIB_NAMES     = $(subst /,., $(subst meta/,, $(basename $(LIB_CURRY))))
# lib names included in library documentation page (without directory prefix)
LIB_DOCNAMES = $(filter-out $(DOCEXCLUDES), $(LIB_NAMES))
# Generated files
LIB_FCY      = $(foreach lib, $(LIB_CURRY:%.curry=.curry/%.fcy), $(subst .curry/meta,meta/.curry,$(lib)))
LIB_ACY      = $(foreach lib, $(LIB_CURRY:%.curry=.curry/%.acy), $(subst .curry/meta,meta/.curry,$(lib)))
LIB_HS       = $(foreach lib, $(LIB_CURRY:.curry=.hs), $(subst .curry/kics2/meta,meta/.curry/kics2, .curry/kics2/$(call prefix,Curry_,$(lib))))
LIB_HS_TRACE = $(foreach lib, $(LIB_CURRY:.curry=.hs), $(subst .curry/kics2/meta,meta/.curry/kics2, .curry/kics2/$(call prefix,Curry_Trace_,$(lib))))
LIB_HTML     = $(foreach lib, $(LIB_CURRY:.curry=.html), $(LIBDOCDIR)/$(if $(findstring meta/,$(lib)),$(lib),$(subst /,.,$(lib))))
LIB_TEX      = $(foreach lib, $(LIB_CURRY:.curry=.tex), $(TEXDOCDIR)/$(if $(findstring meta/,$(lib)),$(lib),$(subst /,.,$(lib))))
HS_LIB_NAMES       = $(call comma_sep,$(foreach lib,$(LIB_NAMES),$(if $(findstring .,$(lib)),$(subst .,.Curry_,$(lib)),Curry_$(lib))))
HS_LIB_TRACE_NAMES = $(call comma_sep,$(foreach lib,$(LIB_NAMES),$(if $(findstring .,$(lib)),$(subst .,.Curry_Trace_,$(lib)),Curry_Trace_$(lib))))

ALLLIBS       = AllLibraries
MAINGOAL      = Curry_Main_Goal.curry
# Modules not included as regular libraries:
EXCLUDES      = $(ALLLIBS).curry $(MAINGOAL)
# Modules not included in library documentation index page:
DOCEXCLUDES  = CPNS HtmlCgi ValueSequence WUIjs

PACKAGE          = kics2-libraries
PACKAGE_TRACE    = kics2-libraries-trace
CABAL_FILE       = $(PACKAGE).cabal
CABAL_TRACE_FILE = $(PACKAGE_TRACE).cabal
CABAL_LIBDEPS    = $(call comma_sep,$(LIBDEPS))

########################################################################
# support for installation
########################################################################

.PHONY: install
install: .curry/kics2/Curry_$(ALLLIBS).hs $(LIB_FCY) $(LIB_ACY) $(LIB_HS) $(LIB_HS_TRACE)
	$(MAKE) $(CABAL_FILE)
	$(CABAL_INSTALL) $(CABAL_PROFILE)
	rm -f $(CABAL_FILE)
	$(MAKE) $(CABAL_TRACE_FILE)
	$(CABAL_INSTALL) $(CABAL_PROFILE)
	rm -f $(CABAL_TRACE_FILE)

# create a program importing all libraries in order to re-compile them
# so that all auxiliary files (.nda, .hs, ...) are up-to-date
$(ALLLIBS).curry: $(LIB_CURRY) Makefile
	rm -f $@
	for i in $(LIB_NAMES) ; do echo "import $$i" >> $@ ; done

.PHONY: allsources
allsources:
	@echo $(LIB_CURRY)

.PHONY: unregister
unregister:
	-$(GHC_UNREGISTER) $(PACKAGE)-$(VERSION)
	-$(GHC_UNREGISTER) $(PACKAGE_TRACE)-$(VERSION)

# clean Haskell intermediate files
.PHONY:
clean:
	-cd .curry/kics2      && rm -f *.hi *.o
	-cd meta/.curry/kics2 && rm -f *.hi *.o

# clean all generated files
.PHONY: cleanall
cleanall:
	rm -rf "$(LIBDOCDIR)"
	rm -rf "$(TEXDOCDIR)"
	rm -rf dist
	rm -f $(CABAL_FILE)
	rm -f $(CABAL_TRACE_FILE)
	$(CLEANCURRY)
	cd meta && $(CLEANCURRY)

$(CABAL_FILE): ../Makefile Makefile
	echo "Name:           $(PACKAGE)"                             > $@
	echo "Version:        $(VERSION)"                            >> $@
	echo "Description:    The standard libraries for KiCS2"      >> $@
	echo "License:        OtherLicense"                          >> $@
	echo "Author:         The KiCS2 Team"                        >> $@
	echo "Maintainer:     kics2@curry-language.org"              >> $@
	echo "Build-Type:     Simple"                                >> $@
	echo "Cabal-Version:  >= 1.9.2"                              >> $@
	echo ""                                                      >> $@
	echo "Library"                                               >> $@
	echo "  Build-Depends:"                                      >> $@
	echo "      kics2-runtime == $(VERSION)"                     >> $@
	echo "    , $(CABAL_LIBDEPS)"                                >> $@
	echo "  if os(windows)"                                      >> $@
	echo "    Build-Depends: Win32"                              >> $@
	echo "  else"                                                >> $@
	echo "    Build-Depends: unix"                               >> $@
	echo "  Exposed-modules: $(HS_LIB_NAMES)"                    >> $@
	echo "  hs-source-dirs: ./.curry/kics2, ./meta/.curry/kics2" >> $@

$(CABAL_TRACE_FILE): ../Makefile Makefile
	echo "Name:           $(PACKAGE_TRACE)"                          > $@
	echo "Version:        $(VERSION)"                               >> $@
	echo "Description:    The tracing standard libraries for KiCS2" >> $@
	echo "License:        OtherLicense"                             >> $@
	echo "Author:         The KiCS2 Team"                           >> $@
	echo "Maintainer:     kics2@curry-language.org"                 >> $@
	echo "Build-Type:     Simple"                                   >> $@
	echo "Cabal-Version:  >= 1.9.2"                                 >> $@
	echo ""                                                         >> $@
	echo "Library"                                                  >> $@
	echo "  Build-Depends:"                                         >> $@
	echo "      kics2-runtime == $(VERSION)"                        >> $@
	echo "    , $(CABAL_LIBDEPS)"                                   >> $@
	echo "  if os(windows)"                                         >> $@
	echo "    Build-Depends: Win32"                                 >> $@
	echo "  else"                                                   >> $@
	echo "    Build-Depends: unix"                                  >> $@
	echo "  Exposed-modules: $(HS_LIB_TRACE_NAMES)"                 >> $@
	echo "  hs-source-dirs: ./.curry/kics2, ./meta/.curry/kics2"    >> $@

# generate Haskell file in subdirectory .curry/kics2
.curry/kics2/Curry_Trace_%.hs: %.curry
	$(COMP) -v0 -i. -imeta --trace-failure $*

.curry/kics2/Curry_%.hs: %.curry
	$(COMP) -v0 -i. -imeta $*

.curry/kics2/AbstractCurry/Curry_Trace_%.hs: AbstractCurry/%.curry
	$(COMP) -v0 -i. -imeta --trace-failure AbstractCurry.$*

.curry/kics2/AbstractCurry/Curry_%.hs: AbstractCurry/%.curry
	$(COMP) -v0 -i. -imeta AbstractCurry.$*

meta/.curry/kics2/Curry_Trace_%.hs: meta/%.curry
	$(COMP) -v0 -i. -imeta --trace-failure meta/$*

meta/.curry/kics2/Curry_%.hs: meta/%.curry
	$(COMP) -v0 -i. -imeta meta/$*

# generate FlatCurry file in subdirectory .curry:
.curry/%.fcy: %.curry
	"$(CYMAKE)" --flat $(CYMAKEPARAMS) $(subst /,.,$*)

# generate all FlatCurry files in subdirectory meta/.curry:
meta/.curry/%.fcy: meta/%.curry
	"$(CYMAKE)" --flat $(CYMAKEPARAMS) $*

# generate all AbstractCurry files in subdirectory .curry:
.curry/%.acy: %.curry
	"$(CYMAKE)" --acy $(CYMAKEPARAMS) $(subst /,.,$*)

meta/.curry/%.acy: meta/%.curry
	"$(CYMAKE)" --acy $(CYMAKEPARAMS) $*

##############################################################################
# create HTML documentation files for system libraries
##############################################################################

.PHONY: doc
doc: $(LIB_CURRY)
	mkdir -p "$(LIBDOCDIR)"
	$(MAKE) $(LIB_HTML)
	@echo "Generating index pages for Curry libraries:"
	@echo $(LIB_DOCNAMES)
	"$(CURRYDOC)" --libsindexhtml "$(LIBDOCDIR)" $(LIB_DOCNAMES)

# generate individual documentations for libraries
$(LIBDOCDIR)/AbstractCurry.%.html: AbstractCurry/%.curry
	"$(CURRYDOC)" --noindexhtml "$(LIBDOCDIR)" AbstractCurry.$*

$(LIBDOCDIR)/%.html: %.curry
	"$(CURRYDOC)" --noindexhtml "$(LIBDOCDIR)" $*

$(LIBDOCDIR)/%.html: meta/%.curry
	"$(CURRYDOC)" --noindexhtml "$(LIBDOCDIR)" $*

##############################################################################
# create LaTeX documentation files for system libraries
##############################################################################

.PHONY: texdoc
texdoc: $(LIB_CURRY)
	mkdir -p "$(TEXDOCDIR)"
	$(MAKE) $(LIB_TEX)

# generate individual LaTeX documentations for libraries
$(TEXDOCDIR)/AbstractCurry.%.tex: AbstractCurry/%.curry
	"$(CURRYDOC)" --tex "$(TEXDOCDIR)" AbstractCurry.$*

$(TEXDOCDIR)/%.tex: %.curry
	"$(CURRYDOC)" --tex "$(TEXDOCDIR)" $*

$(TEXDOCDIR)/%.tex: meta/%.curry
	"$(CURRYDOC)" --tex "$(TEXDOCDIR)" $*
